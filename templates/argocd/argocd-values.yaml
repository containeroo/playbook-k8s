controller:
  env:
    - name: TZ
      value: {{ timezone }}
    - name: ARGOCD_GPG_ENABLED
      value: "false"
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      namespace: {{ kube_prometheus_stack_namespace }}
      additionalLabels:
        prometheus: default
    rules:
      enabled: true
      spec:
        - alert: ArgoAppMissing
          expr: |
            absent(argocd_app_info)
          for: 15m
          labels:
            severity: critical
          annotations:
            summary: "[ArgoCD] No reported applications"
            description: >
              ArgoCD has not reported any applications data for the past 15 minutes which
              means that it must be down or not functioning properly.  This needs to be
              resolved for this cloud to continue to maintain state.
        - alert: ArgoAppNotSynced
          expr: |
            argocd_app_info{sync_status!="Synced"} == 1
          for: 12h
          labels:
            severity: warning
          annotations:
{% raw %}
            summary: "`{{ $labels.name }}` Application not synchronized"
            description: >
              The application `{{ $labels.name }}` has not been synchronized for over
{% endraw %}
              12 hours which means that the state of this cloud has drifted away from the
              state inside Git.
        - alert: ArgoAppNotHealthy
          expr: |
            argocd_app_info{health_status!="Healthy"} == 1
          labels:
            severity: critical
          annotations:
{% raw %}
            summary: "`{{ $labels.name }}` Application not healthy"
            description: >
              The application `{{ $labels.name }}` is not healthy.
{% endraw %}
      namespace: {{ kube_prometheus_stack_namespace }}
      additionalLabels:
        prometheus: default
server:
  env:
    - name: TZ
      value: {{ timezone }}
    - name: ARGOCD_GPG_ENABLED
      value: "false"
  config:
{% if argocd_sso_enabled %}
    admin.enabled: "false"
    oidc.config: |
      name: {{ argocd_sso_name }}
      issuer: {{ argocd_sso_idp_url }}
      clientID: {{ argocd_sso_client_id }}
      clientSecret: {{ argocd_sso_client_secret }}
      requestedScopes: ["openid", "profile", "email"]
{% else %}
    admin.enabled: "true"
{% endif %}
    repositories: |
{% for repo in argocd_repos %}
        - passwordSecret:
            key: {{ repo.name }}Password
            name: argocd-secret
          type: git
          url: {{ repo.url }}
          usernameSecret:
            key: {{ repo.name }}Username
            name: argocd-secret
{% endfor %}
    url: https://{{ argocd_hostname }}
{% if argocd_extraArgs is not none %}
  extraArgs:
{% for extraArg in argocd_extraArgs %}
    - {{ extraArg }}
{% endfor %}
{% endif %}
  rbacConfig:
    policy.default: role:admin
configs:
  secret:
    extra:
{% for repo in argocd_repos %}
      {{ repo.name }}Password: {{ repo.password }}
      {{ repo.name }}Username: {{ repo.username }}
{% endfor %}
dex:
  env:
    - name: TZ
      value: {{ timezone }}
redis:
  env:
    - name: TZ
      value: {{ timezone }}
repoServer:
  env:
    - name: TZ
      value: {{ timezone }}
    - name: ARGOCD_GPG_ENABLED
      value: "false"
